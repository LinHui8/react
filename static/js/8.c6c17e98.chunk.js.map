{"version":3,"sources":["components/NavHeader/index.js","components/NavHeader/index.module.css","pages/Map/index.module.css","pages/Map/index.js"],"names":["withRouter","children","history","onLeftClick","className","rightContent","styles","navBar","join","mode","icon","go","module","exports","BMap","window","labelStyle","cursor","border","padding","whiteSpace","fontSize","color","textAlign","Map","state","housesList","isShowList","this","initMap","JSON","parse","localStorage","getItem","label","value","map","Geocoder","getPoint","point","a","centerAndZoom","addControl","NavigationControl","ScaleControl","renderOverlays","addEventListener","setState","id","Toast","loading","API","get","res","hide","data","body","getTypeAndZoom","nextZoom","type","forEach","item","createOverlays","zoom","getZoom","coord","longitude","latitude","areaName","count","areaPoint","Point","createCircle","createRect","name","Label","position","offset","Size","setContent","bubble","setStyle","setTimeout","clearOverlays","addOverlay","rect","housename","housenum","arrow","e","getHousesList","target","changedTouches","panBy","innerWidth","clientX","innerHeight","clientY","list","onClick","props","push","houseCode","key","src","BASE_URL","houseImg","title","desc","tags","price","container","houseList","show","titleWrap","listTitle","titleMore","to","houseItems","renderHousesList","React","Component"],"mappings":"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","file":"static/js/8.c6c17e98.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { NavBar } from 'antd-mobile'\r\n\r\n// 导入 withRouter 高阶组件\r\nimport { withRouter } from 'react-router-dom'\r\n\r\n// 导入 props 校验的包\r\nimport PropTypes from 'prop-types'\r\n\r\n// 导入样式\r\n// import './index.scss'\r\nimport styles from './index.module.css'\r\n\r\n// 添加 className 和 rightContent（导航栏右侧内容） 属性\r\nfunction NavHeader({\r\n  children,\r\n  history,\r\n  onLeftClick,\r\n  className,\r\n  rightContent\r\n}) {\r\n  // 默认点击行为\r\n  const defaultHandler = () => history.go(-1)\r\n\r\n  return (\r\n    <NavBar\r\n      className={[styles.navBar, className || ''].join(' ')}\r\n      mode=\"light\"\r\n      icon={<i className=\"iconfont icon-back\" />}\r\n      onLeftClick={onLeftClick || defaultHandler}\r\n      rightContent={rightContent}\r\n    >\r\n      {children}\r\n    </NavBar>\r\n  )\r\n}\r\n\r\n// 添加props校验\r\nNavHeader.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n  onLeftClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  rightContent: PropTypes.array\r\n}\r\n\r\n// withRouter(NavHeader) 函数的返回值也是一个组件\r\nexport default withRouter(NavHeader)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavHeader_navBar__2SDxf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"Map_map__RBO9Q\",\"container\":\"Map_container__rxpnF\",\"bubble\":\"Map_bubble__1UYQ5\",\"name\":\"Map_name__16xho\",\"rect\":\"Map_rect__3r1vQ\",\"arrow\":\"Map_arrow__Ecylr\",\"housename\":\"Map_housename__3FBHa\",\"housenum\":\"Map_housenum__1DSjS\",\"houseList\":\"Map_houseList__2ciqT\",\"show\":\"Map_show__1ZjTo\",\"titleWrap\":\"Map_titleWrap__3lM3f\",\"listTitle\":\"Map_listTitle__3ND7Z\",\"titleMore\":\"Map_titleMore__2CS1v\",\"houseItems\":\"Map_houseItems__2XTLO\"};","import React from 'react'\r\n\r\n// 导入axios\r\n// import axios from 'axios'\r\nimport { API } from '../../utils/api'\r\nimport { Link } from 'react-router-dom'\r\nimport { Toast } from 'antd-mobile'\r\n\r\n// 导入BASE_URL\r\nimport { BASE_URL } from '../../utils/url'\r\n\r\n// 导入封装好的 NavHeader 组件\r\nimport NavHeader from '../../components/NavHeader'\r\n\r\n// 导入 HouseItem 组件\r\nimport HouseItem from '../../components/HouseItem'\r\n\r\n// 导入样式\r\n// import './index.scss'\r\nimport styles from './index.module.css'\r\n\r\n// 解决脚手架中全局变量访问的问题\r\nconst BMap = window.BMap\r\n\r\n// 覆盖物样式\r\nconst labelStyle = {\r\n  cursor: 'pointer',\r\n  border: '0px solid rgb(255, 0, 0)',\r\n  padding: '0px',\r\n  whiteSpace: 'nowrap',\r\n  fontSize: '12px',\r\n  color: 'rgb(255, 255, 255)',\r\n  textAlign: 'center'\r\n}\r\n\r\nexport default class Map extends React.Component {\r\n  state = {\r\n    // 小区下的房源列表\r\n    housesList: [],\r\n    // 表示是否展示房源列表\r\n    isShowList: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initMap()\r\n  }\r\n\r\n  // 初始化地图\r\n  initMap() {\r\n    // 获取当前定位城市\r\n    const { label, value } = JSON.parse(localStorage.getItem('hkzf_city'))\r\n    // 初始化地图实例\r\n    const map = new BMap.Map('container')\r\n    // 作用：能够在其他方法中通过 this 来获取到地图对象\r\n    this.map = map\r\n    // 创建地址解析器实例\r\n    const myGeo = new BMap.Geocoder()\r\n    // 将地址解析结果显示在地图上，并调整地图视野\r\n    myGeo.getPoint(\r\n      label,\r\n      async point => {\r\n        if (point) {\r\n          //  初始化地图\r\n          map.centerAndZoom(point, 11)\r\n          // 添加常用控件\r\n          map.addControl(new BMap.NavigationControl())\r\n          map.addControl(new BMap.ScaleControl())\r\n\r\n          // 调用 renderOverlays 方法\r\n          this.renderOverlays(value)\r\n        }\r\n      },\r\n      label\r\n    )\r\n\r\n    // 给地图绑定移动事件\r\n    map.addEventListener('movestart', () => {\r\n      // console.log('movestart')\r\n      if (this.state.isShowList) {\r\n        this.setState({\r\n          isShowList: false\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  // 渲染覆盖物入口\r\n  // 1 接收区域 id 参数，获取该区域下的房源数据\r\n  // 2 获取房源类型以及下级地图缩放级别\r\n  async renderOverlays(id) {\r\n    try {\r\n      // 开启loading\r\n      Toast.loading('加载中...', 0, null, false)\r\n\r\n      const res = await API.get(`/area/map?id=${id}`)\r\n      // 关闭 loading\r\n      Toast.hide()\r\n\r\n      const data = res.data.body\r\n\r\n      // 调用 getTypeAndZoom 方法获取级别和类型\r\n      const { nextZoom, type } = this.getTypeAndZoom()\r\n\r\n      data.forEach(item => {\r\n        // 创建覆盖物\r\n        this.createOverlays(item, nextZoom, type)\r\n      })\r\n    } catch (e) {\r\n      // 关闭 loading\r\n      Toast.hide()\r\n    }\r\n  }\r\n\r\n  // 计算要绘制的覆盖物类型和下一个缩放级别\r\n  // 区   -> 11 ，范围：>=10 <12\r\n  // 镇   -> 13 ，范围：>=12 <14\r\n  // 小区 -> 15 ，范围：>=14 <16\r\n  getTypeAndZoom() {\r\n    // 调用地图的 getZoom() 方法，来获取当前缩放级别\r\n    const zoom = this.map.getZoom()\r\n    let nextZoom, type\r\n\r\n    // console.log('当前地图缩放级别：', zoom)\r\n    if (zoom >= 10 && zoom < 12) {\r\n      // 区\r\n      // 下一个缩放级别\r\n      nextZoom = 13\r\n      // circle 表示绘制圆形覆盖物（区、镇）\r\n      type = 'circle'\r\n    } else if (zoom >= 12 && zoom < 14) {\r\n      // 镇\r\n      nextZoom = 15\r\n      type = 'circle'\r\n    } else if (zoom >= 14 && zoom < 16) {\r\n      // 小区\r\n      type = 'rect'\r\n    }\r\n\r\n    return {\r\n      nextZoom,\r\n      type\r\n    }\r\n  }\r\n\r\n  // 创建覆盖物\r\n  createOverlays(data, zoom, type) {\r\n    const {\r\n      coord: { longitude, latitude },\r\n      label: areaName,\r\n      count,\r\n      value\r\n    } = data\r\n\r\n    // 创建坐标对象\r\n    const areaPoint = new BMap.Point(longitude, latitude)\r\n\r\n    if (type === 'circle') {\r\n      // 区或镇\r\n      this.createCircle(areaPoint, areaName, count, value, zoom)\r\n    } else {\r\n      // 小区\r\n      this.createRect(areaPoint, areaName, count, value)\r\n    }\r\n  }\r\n\r\n  // 创建区、镇覆盖物\r\n  createCircle(point, name, count, id, zoom) {\r\n    // 创建覆盖物\r\n    const label = new BMap.Label('', {\r\n      position: point,\r\n      offset: new BMap.Size(-35, -35)\r\n    })\r\n\r\n    // 给 label 对象添加一个唯一标识\r\n    label.id = id\r\n\r\n    // 设置房源覆盖物内容\r\n    label.setContent(`\r\n      <div class=\"${styles.bubble}\">\r\n        <p class=\"${styles.name}\">${name}</p>\r\n        <p>${count}套</p>\r\n      </div>\r\n    `)\r\n\r\n    // 设置样式\r\n    label.setStyle(labelStyle)\r\n\r\n    // 添加单击事件\r\n    label.addEventListener('click', () => {\r\n      // 调用 renderOverlays 方法，获取该区域下的房源数据\r\n      this.renderOverlays(id)\r\n\r\n      // 放大地图，以当前点击的覆盖物为中心放大地图\r\n      this.map.centerAndZoom(point, zoom)\r\n\r\n      // 解决清除覆盖物时，百度地图API的JS文件自身报错的问题\r\n      setTimeout(() => {\r\n        // 清除当前覆盖物信息\r\n        this.map.clearOverlays()\r\n      }, 0)\r\n    })\r\n\r\n    // 添加覆盖物到地图中\r\n    this.map.addOverlay(label)\r\n  }\r\n\r\n  // 创建小区覆盖物\r\n  createRect(point, name, count, id) {\r\n    // 创建覆盖物\r\n    const label = new BMap.Label('', {\r\n      position: point,\r\n      offset: new BMap.Size(-50, -28)\r\n    })\r\n\r\n    // 给 label 对象添加一个唯一标识\r\n    label.id = id\r\n\r\n    // 设置房源覆盖物内容\r\n    label.setContent(`\r\n      <div class=\"${styles.rect}\">\r\n        <span class=\"${styles.housename}\">${name}</span>\r\n        <span class=\"${styles.housenum}\">${count}套</span>\r\n        <i class=\"${styles.arrow}\"></i>\r\n      </div>\r\n    `)\r\n\r\n    // 设置样式\r\n    label.setStyle(labelStyle)\r\n\r\n    // 添加单击事件\r\n    label.addEventListener('click', e => {\r\n      // 获取并渲染房源数据\r\n      this.getHousesList(id)\r\n\r\n      // 获取当前被点击项\r\n      const target = e.changedTouches[0]\r\n      this.map.panBy(\r\n        window.innerWidth / 2 - target.clientX,\r\n        (window.innerHeight - 330) / 2 - target.clientY\r\n      )\r\n    })\r\n\r\n    // 添加覆盖物到地图中\r\n    this.map.addOverlay(label)\r\n  }\r\n\r\n  // 获取小区房源数据\r\n  async getHousesList(id) {\r\n    try {\r\n      // 开启loading\r\n      Toast.loading('加载中...', 0, null, false)\r\n\r\n      const res = await API.get(`/houses?cityId=${id}`)\r\n      // 关闭 loading\r\n      Toast.hide()\r\n\r\n      this.setState({\r\n        housesList: res.data.body.list,\r\n        // 展示房源列表\r\n        isShowList: true\r\n      })\r\n    } catch (e) {\r\n      // 关闭 loading\r\n      Toast.hide()\r\n    }\r\n  }\r\n\r\n  // 封装渲染房屋列表的方法\r\n  renderHousesList() {\r\n    return this.state.housesList.map(item => (\r\n      <HouseItem\r\n        onClick={() => this.props.history.push(`/detail/${item.houseCode}`)}\r\n        key={item.houseCode}\r\n        src={BASE_URL + item.houseImg}\r\n        title={item.title}\r\n        desc={item.desc}\r\n        tags={item.tags}\r\n        price={item.price}\r\n      />\r\n    ))\r\n\r\n    // return this.state.housesList.map(item => (\r\n    //   <div className={styles.house} key={item.houseCode}>\r\n    //     <div className={styles.imgWrap}>\r\n    //       <img className={styles.img} src={BASE_URL + item.houseImg} alt=\"\" />\r\n    //     </div>\r\n    //     <div className={styles.content}>\r\n    //       <h3 className={styles.title}>{item.title}</h3>\r\n    //       <div className={styles.desc}>{item.desc}</div>\r\n    //       <div>\r\n    //         {/* ['近地铁', '随时看房'] */}\r\n    //         {item.tags.map((tag, index) => {\r\n    //           const tagClass = 'tag' + (index + 1)\r\n    //           return (\r\n    //             <span\r\n    //               className={[styles.tag, styles[tagClass]].join(' ')}\r\n    //               key={tag}\r\n    //             >\r\n    //               {tag}\r\n    //             </span>\r\n    //           )\r\n    //         })}\r\n    //       </div>\r\n    //       <div className={styles.price}>\r\n    //         <span className={styles.priceNum}>{item.price}</span> 元/月\r\n    //       </div>\r\n    //     </div>\r\n    //   </div>\r\n    // ))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.map}>\r\n        {/* 顶部导航栏组件 */}\r\n        <NavHeader>地图找房</NavHeader>\r\n        {/* 地图容器元素 */}\r\n        <div id=\"container\" className={styles.container} />\r\n\r\n        {/* 房源列表 */}\r\n        {/* 添加 styles.show 展示房屋列表 */}\r\n        <div\r\n          className={[\r\n            styles.houseList,\r\n            this.state.isShowList ? styles.show : ''\r\n          ].join(' ')}\r\n        >\r\n          <div className={styles.titleWrap}>\r\n            <h1 className={styles.listTitle}>房屋列表</h1>\r\n            <Link className={styles.titleMore} to=\"/home/list\">\r\n              更多房源\r\n            </Link>\r\n          </div>\r\n\r\n          <div className={styles.houseItems}>\r\n            {/* 房屋结构 */}\r\n            {this.renderHousesList()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":""}