{"version":3,"sources":["components/NavHeader/index.js","components/NavHeader/index.module.css","pages/CityList/index.js"],"names":["withRouter","children","history","onLeftClick","className","rightContent","styles","navBar","join","mode","icon","go","module","exports","formatCityData","list","cityList","forEach","item","first","short","substr","push","cityIndex","Object","keys","sort","HOUSE_CITY","CityList","props","rowRenderer","key","index","style","isScrolling","isVisible","state","letter","toUpperCase","formatCityIndex","map","value","onClick","changeCity","label","getRowHeight","length","onRowsRendered","startIndex","activeIndex","setState","cityListComponent","React","createRef","this","getCityList","current","measureAllRows","axios","get","res","data","body","hotRes","unshift","getCurrentCity","curCity","indexOf","localStorage","setItem","JSON","stringify","Toast","info","scrollToRow","width","height","ref","rowCount","rowHeight","scrollToAlignment","renderCityIndex","Component"],"mappings":"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","file":"static/js/6.b0fc8375.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { NavBar } from 'antd-mobile'\r\n\r\n// 导入 withRouter 高阶组件\r\nimport { withRouter } from 'react-router-dom'\r\n\r\n// 导入 props 校验的包\r\nimport PropTypes from 'prop-types'\r\n\r\n// 导入样式\r\n// import './index.scss'\r\nimport styles from './index.module.css'\r\n\r\n// 添加 className 和 rightContent（导航栏右侧内容） 属性\r\nfunction NavHeader({\r\n  children,\r\n  history,\r\n  onLeftClick,\r\n  className,\r\n  rightContent\r\n}) {\r\n  // 默认点击行为\r\n  const defaultHandler = () => history.go(-1)\r\n\r\n  return (\r\n    <NavBar\r\n      className={[styles.navBar, className || ''].join(' ')}\r\n      mode=\"light\"\r\n      icon={<i className=\"iconfont icon-back\" />}\r\n      onLeftClick={onLeftClick || defaultHandler}\r\n      rightContent={rightContent}\r\n    >\r\n      {children}\r\n    </NavBar>\r\n  )\r\n}\r\n\r\n// 添加props校验\r\nNavHeader.propTypes = {\r\n  children: PropTypes.string.isRequired,\r\n  onLeftClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  rightContent: PropTypes.array\r\n}\r\n\r\n// withRouter(NavHeader) 函数的返回值也是一个组件\r\nexport default withRouter(NavHeader)\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavHeader_navBar__2SDxf\"};","import React from 'react'\r\n\r\nimport axios from 'axios'\r\nimport { Toast } from 'antd-mobile'\r\n\r\n// 导入 List 组件\r\nimport { List, AutoSizer } from 'react-virtualized'\r\n\r\n// 导入 utils 中获取当前定位城市的方法\r\nimport { getCurrentCity } from '../../utils'\r\n\r\n// 导入 NavHeader 组件\r\nimport NavHeader from '../../components/NavHeader'\r\n\r\nimport './index.scss'\r\n\r\n// 导入 CSSModules 的样式文件\r\n// import styles from './index.module.css'\r\n// console.log(styles)\r\n\r\n// 数据格式化的方法\r\n// list: [{}, {}]\r\nconst formatCityData = list => {\r\n  const cityList = {}\r\n  // const cityIndex = []\r\n\r\n  // 1 遍历list数组\r\n  list.forEach(item => {\r\n    // 2 获取每一个城市的首字母\r\n    const first = item.short.substr(0, 1)\r\n    // 3 判断 cityList 中是否有该分类\r\n    if (cityList[first]) {\r\n      // 4 如果有，直接往该分类中push数据\r\n      // cityList[first] => [{}, {}]\r\n      cityList[first].push(item)\r\n    } else {\r\n      // 5 如果没有，就先创建一个数组，然后，把当前城市信息添加到数组中\r\n      cityList[first] = [item]\r\n    }\r\n  })\r\n\r\n  // 获取索引数据\r\n  const cityIndex = Object.keys(cityList).sort()\r\n\r\n  return {\r\n    cityList,\r\n    cityIndex\r\n  }\r\n}\r\n\r\n// 索引（A、B等）的高度\r\nconst TITLE_HEIGHT = 36\r\n// 每个城市名称的高度\r\nconst NAME_HEIGHT = 50\r\n\r\n// 封装处理字母索引的方法\r\nconst formatCityIndex = letter => {\r\n  switch (letter) {\r\n    case '#':\r\n      return '当前定位'\r\n    case 'hot':\r\n      return '热门城市'\r\n    default:\r\n      return letter.toUpperCase()\r\n  }\r\n}\r\n\r\n// 有房源的城市\r\nconst HOUSE_CITY = ['北京', '上海', '广州', '深圳']\r\n\r\nexport default class CityList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      cityList: {},\r\n      cityIndex: [],\r\n      // 指定右侧字母索引列表高亮的索引号\r\n      activeIndex: 0\r\n    }\r\n\r\n    // 创建ref对象\r\n    this.cityListComponent = React.createRef()\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getCityList()\r\n\r\n    // 调用 measureAllRows，提前计算 List 中每一行的高度，实现 scrollToRow 的精确跳转\r\n    this.cityListComponent.current.measureAllRows()\r\n  }\r\n\r\n  // 获取城市列表数据的方法\r\n  async getCityList() {\r\n    const res = await axios.get('http://localhost:8080/area/city?level=1')\r\n    const { cityList, cityIndex } = formatCityData(res.data.body)\r\n\r\n    // 获取热门城市数据\r\n    const hotRes = await axios.get('http://localhost:8080/area/hot')\r\n    cityList['hot'] = hotRes.data.body\r\n    cityIndex.unshift('hot')\r\n\r\n    // 获取当前定位城市\r\n    const curCity = await getCurrentCity()\r\n    cityList['#'] = [curCity]\r\n    cityIndex.unshift('#')\r\n\r\n    // console.log(cityList, cityIndex, curCity)\r\n    this.setState({\r\n      cityList,\r\n      cityIndex\r\n    })\r\n  }\r\n\r\n  changeCity({ label, value }) {\r\n    if (HOUSE_CITY.indexOf(label) > -1) {\r\n      // 有\r\n      localStorage.setItem('hkzf_city', JSON.stringify({ label, value }))\r\n      this.props.history.go(-1)\r\n    } else {\r\n      Toast.info('该城市暂无房源数据', 1, null, false)\r\n    }\r\n  }\r\n\r\n  // List组件渲染每一行的方法：\r\n  rowRenderer = ({\r\n    key, // Unique key within array of rows\r\n    index, // 索引号\r\n    isScrolling, // 当前项是否正在滚动中\r\n    isVisible, // 当前项在 List 中是可见的\r\n    style // 注意：重点属性，一定要给每一个行数据添加该样式！作用：指定每一行的位置\r\n  }) => {\r\n    // 获取每一行的字母索引\r\n    const { cityIndex, cityList } = this.state\r\n    const letter = cityIndex[index]\r\n\r\n    // 获取指定字母索引下的城市列表数据\r\n    // console.log(cityList[letter])\r\n\r\n    return (\r\n      <div key={key} style={style} className=\"city\">\r\n        <div className=\"title\">{formatCityIndex(letter)}</div>\r\n        {cityList[letter].map(item => (\r\n          <div\r\n            className=\"name\"\r\n            key={item.value}\r\n            onClick={() => this.changeCity(item)}\r\n          >\r\n            {item.label}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // 创建动态计算每一行高度的方法\r\n  getRowHeight = ({ index }) => {\r\n    // 索引标题高度 + 城市数量 * 城市名称的高度\r\n    // TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT\r\n    const { cityList, cityIndex } = this.state\r\n    return TITLE_HEIGHT + cityList[cityIndex[index]].length * NAME_HEIGHT\r\n  }\r\n\r\n  // 封装渲染右侧索引列表的方法\r\n  renderCityIndex() {\r\n    // 获取到 cityIndex，并遍历其，实现渲染\r\n    const { cityIndex, activeIndex } = this.state\r\n    return cityIndex.map((item, index) => (\r\n      <li\r\n        className=\"city-index-item\"\r\n        key={item}\r\n        onClick={() => {\r\n          // console.log('当前索引号：', index)\r\n          this.cityListComponent.current.scrollToRow(index)\r\n        }}\r\n      >\r\n        <span className={activeIndex === index ? 'index-active' : ''}>\r\n          {item === 'hot' ? '热' : item.toUpperCase()}\r\n        </span>\r\n      </li>\r\n    ))\r\n  }\r\n\r\n  // 用于获取List组件中渲染行的信息\r\n  onRowsRendered = ({ startIndex }) => {\r\n    // console.log('startIndex：', startIndex)\r\n    if (this.state.activeIndex !== startIndex) {\r\n      this.setState({\r\n        activeIndex: startIndex\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"citylist\">\r\n        {/* 顶部导航栏 */}\r\n        <NavHeader>城市选择</NavHeader>\r\n\r\n        {/* 城市列表 */}\r\n        <AutoSizer>\r\n          {({ width, height }) => (\r\n            <List\r\n              ref={this.cityListComponent}\r\n              width={width}\r\n              height={height}\r\n              rowCount={this.state.cityIndex.length}\r\n              rowHeight={this.getRowHeight}\r\n              rowRenderer={this.rowRenderer}\r\n              onRowsRendered={this.onRowsRendered}\r\n              scrollToAlignment=\"start\"\r\n            />\r\n          )}\r\n        </AutoSizer>\r\n\r\n        {/* 右侧索引列表 */}\r\n        <ul className=\"city-index\">{this.renderCityIndex()}</ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":""}